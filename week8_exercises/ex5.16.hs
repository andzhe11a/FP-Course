{-
5.16. Пъзел на Синди[6].
Дадена е игрова дъска като на фигура 2, която се състои от n черни и n
бели фигури. Фигурите могат да бъдат разположени на 2n+ 1 различни
позиции. Играта започва с разполагане на всички черни фигури вляво,
а всички бели - вдясно на дъската.
Черните фигури могат да се местят само надясно, а белите - само наляво.
На всеки ход важат следните правила:
• всяка фигура се мести само с по една позиция, ако съответната
позиция не е заета;
• ако позицията е заета, фигурата X може да прескочи точно една
фигура Y от противоположния цвят, ако позицията след Y e сво-
бодна.

Да се напише програма, която по въведено число n отпечатва на екрана
инструкции за игра така, че в края на играта всички бели фигури да
са вляво на дъската, а всички черни - вдясно. Инструкциите да са от
следния вид:
...
Преместете черна фигура фигура от позиция 1 на позиция 2.
Преместете бяла фигура от позиция 5 на позиция 3.
...
Допустимо е инструкциите да бъдат отпечатани в обратен ред.
-}

type Pos = Int
type N = Int

data Piece = Black | White deriving (Eq, Show)

data Move = Move Piece Pos Pos

instance Show Move where
  show (Move Black from to) = "Преместете черна фигура от позиция " ++ show from ++ " на позиция " ++ show to ++ "."
  show (Move White from to) = "Преместете бяла фигура от позиция " ++ show from ++ " на позиция " ++ show to ++ "."

sindyPuzzle :: N -> [Move]
sindyPuzzle n = solve n 0

solve :: N -> Pos -> [Move]
solve 0 _ = []
solve n pos =
    solve (n - 1) pos ++
    [Move Black (pos + n - 1) (pos + n)] ++
    solve (n - 1) (pos + 1) ++
    [Move White (2 * n - pos) (2 * n - pos - 1)] ++
    solve (n - 1) pos

main :: IO ()
main = mapM_ print (sindyPuzzle 2)